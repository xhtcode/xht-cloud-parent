package ${packageName};

#foreach($pkg in ${importClassNames})
${pkg}
#end

/**
 * 描述 ：${tableComment}
 *
 * @author : ${author}
 **/
@Slf4j
@RestController
@RequestMapping("${url}")
@RequiredArgsConstructor
@Tag(name = "${tableComment}")
public class ${className}Controller {

    private final I${className}Service ${classNameFirstLower}Service;

    /**
     * 创建
     *
     * @param addRequest {@link ${className}AddRequest}
     * @return {@link Boolean} true成功 false失败
     */
    @Operation(summary = "创建-${tableComment}")
    @PostMapping
    @RepeatSubmit
    @PreAuthorize("@oauth2.hasAnyAuthority('${perms}:add')")
    public R<Boolean> create(@Validated(Create.class) @RequestBody ${className}AddRequest addRequest) {
        ${classNameFirstLower}Service.create(addRequest);
        return ok(true);
    }

    /**
     * 根据id修改
     *
     * @param updateRequest {@link ${className}UpdateRequest}
     * @return {@link Boolean} true成功 false失败
     */
    @Operation(summary = "根据id修改-${tableComment}")
    @PutMapping
    @RepeatSubmit
    @PreAuthorize("@oauth2.hasAnyAuthority('${perms}:edit')")
    public R<Boolean> update(@Validated(Update.class) @RequestBody ${className}UpdateRequest updateRequest) {
        ${classNameFirstLower}Service.update(updateRequest);
        return ok(true);
    }

    /**
     * 根据id删除
     *
     * @param ids {@link List <String>} id集合
     * @return {@link Boolean} true成功 false失败
     */
    @Operation(summary = "根据id删除-${tableComment}")
    @Parameter(name = "id", description = "id", required = true)
    @DeleteMapping
    @RepeatSubmit
    @PreAuthorize("@oauth2.hasAnyAuthority('${perms}:remove')")
    public R<Boolean> remove(@RequestBody List<String> ids) {
        ${classNameFirstLower}Service.remove(ids);
        return ok(true);
    }

    /**
     * 根据id查询详细
     *
     * @param id {@link String} 数据库主键
     * @return {@link ${className}Response}
     */
    @Operation(summary = "根据id查询详细-${tableComment}")
    @Parameter(name = "id", description = "id", required = true)
    @GetMapping("/{id}")
    public R<${className}Response> findById(@PathVariable("id") String id) {
        return R.ok(${classNameFirstLower}Service.findById(id));
    }

    /**
     * 分页查询
     *
     * @param queryRequest {@link ${className}QueryRequest}
     * @return {@link PageResponse<${className}Response>} 分页详情
     */
    @Operation(summary = "分页查询-${tableComment}")
    @GetMapping
    public R<PageResponse<${className}Response>> findPage(${className}QueryRequest queryRequest) {
        return R.ok(${classNameFirstLower}Service.findPage(queryRequest));
    }

}
