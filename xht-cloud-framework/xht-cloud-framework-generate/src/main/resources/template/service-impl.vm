package ${packageName};

#foreach($pkg in ${importClassNames})
${pkg}
#end

/**
 * 描述 ：${tableComment}
 *
 * @author : ${author}
 **/
@Slf4j
@Service
@RequiredArgsConstructor
public class ${className}ServiceImpl implements I${className}Service {

    private final ${className}Mapper ${classNameFirstLower}Mapper;

    private final ${className}Convert ${classNameFirstLower}Convert;

    /**
     * 创建
     *
     * @param addRequest {@link ${className}AddRequest}
     * @return {@link String} 主键
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public String create(${className}AddRequest addRequest) {
        ${className}DO entity = ${classNameFirstLower}Convert.toDO(addRequest);
        ${classNameFirstLower}Mapper.insert(entity);
        return entity.${pkColumn.columnNameGet}();
    }

    /**
     * 根据id修改
     *
     * @param updateRequest ${className}UpdateRequest
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void update(${className}UpdateRequest updateRequest) {
        if (Objects.isNull(findById(updateRequest.${pkColumn.columnNameGet}()))) {
            throw new BizException("修改的对象不存在！");
        }
        ${classNameFirstLower}Mapper.updateById(${classNameFirstLower}Convert.toDO(updateRequest));
    }

    /**
     * 删除
     *
     * @param ids {@link List<String>} id集合
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void remove(List<String> ids) {
        ${classNameFirstLower}Mapper.deleteBatchIds(ids);
    }

    /**
     * 根据id查询详细
     *
     * @param id {@link String} 数据库主键
     * @return {@link ${className}Response}
     */
    @Override
    public ${className}Response findById(String id) {
        return ${classNameFirstLower}Convert.toResponse(${classNameFirstLower}Mapper.findById(id).orElse(null));
    }

    /**
     * 分页查询
     *
     * @param queryRequest {@link ${className}QueryRequest}
     * @return {@link PageResponse<${className}Response>} 分页详情
     */
    @Override
    public PageResponse<${className}Response> findPage(${className}QueryRequest queryRequest) {
        IPage<${className}DO> ${classNameFirstLower}IPage = ${classNameFirstLower}Mapper.selectPage(PageTool.getPage(queryRequest), ${className}Wrapper.getInstance().lambdaQuery(${classNameFirstLower}Convert.toDO(queryRequest)));
        return ${classNameFirstLower}Convert.toPageResponse(${classNameFirstLower}IPage);
    }

}
