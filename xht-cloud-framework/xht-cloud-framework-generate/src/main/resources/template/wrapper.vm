package ${packageName};

#foreach($pkg in ${importClassNames})
${pkg}
#end

/**
 * 描述 ：${tableComment}
 *
 * @author : ${author}
 **/
public final class ${className}Wrapper implements EntityWrapper<${className}DO> {

    /**
     * 私有化构造器
     */
    private ${className}Wrapper() {
    }

    /**
     * 获取实例
     */
    public static ${className}Wrapper getInstance() {
        return Instance.INSTANCE.getInstance();
    }

    /**
     * 实例处理化
     */
    private enum Instance {

        INSTANCE;

        private final ${className}Wrapper wrapper;

        Instance() {
            wrapper = new ${className}Wrapper();
        }

        public ${className}Wrapper getInstance() {
            return wrapper;
        }
    }

    /**
     * 获取 {@link LambdaQueryWrapper}
     *
     * @param entity 实体类
     * @return {@link LambdaQueryWrapper}
     */
    @Override
    public LambdaQueryWrapper<${className}DO> lambdaQuery(${className}DO entity) {
        if (Objects.isNull(entity)) {
            return lambdaQuery();
        }
        LambdaQueryWrapper<${className}DO> wrapper = new LambdaQueryWrapper<>();
        return wrapper
#foreach ($column in ${columns})
                .eq(${column.convertMethod}(entity.${column.columnNameGet}()), ${className}DO::${column.columnNameGet}, entity.${column.columnNameGet}())
#end
        ;
    }

    /**
     * 获取 {@link LambdaUpdateWrapper}
     *
     * @param entity 实体类
     * @return {@link LambdaUpdateWrapper}
     */
    @Override
    public LambdaUpdateWrapper<${className}DO> lambdaUpdate(${className}DO entity) {
        if (Objects.isNull(entity)) {
            return lambdaUpdate();
        }
        LambdaUpdateWrapper<${className}DO> wrapper = new LambdaUpdateWrapper<>();
        return wrapper
#foreach ($column in $columns)
#if(${column.pk} == '0')                .set(${className}DO::${column.columnNameGet}, entity.${column.columnNameGet}())
                #end
#end
        ;
    }


}
