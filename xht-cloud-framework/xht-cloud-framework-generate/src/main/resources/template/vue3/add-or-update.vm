<template>
  <el-dialog :close-on-click-modal="false"
             :title="addUpdatePageInit.title"
             v-model="addUpdatePageInit.visible"
             :before-close='close'
             append-to-body
             align-center
  >
    <el-form ref="addUpdateFormRef"
             :model="addUpdateForm"
             :rules="rules"
             label-width="80px"
             v-loading="addUpdatePageInit.loading"
             element-loading-text="拼命加载中">
 #foreach($column in $columns)
      <el-row :gutter="20">
        <el-col :span="24">
          <el-form-item label="${column.describe}" prop="${column.columnName}">
            <el-input v-model="addUpdateForm.${column.columnName}" clearable placeholder="${column.describe}"/>
          </el-form-item>
        </el-col>
      </el-row>
#end
    </el-form>
    <template #footer>
      <el-button type="primary" @click="submitForm" :disabled="addUpdatePageInit.loading">
        {{ addUpdatePageInit.buttonTitle }}
      </el-button>
      <el-button @click="close">取 消</el-button>
    </template>
  </el-dialog>
</template>
<script lang="ts" setup name="${className}AddUpdate">
import {get${className}ById, save${className}, update${className}} from '${apiPackage}'
import {reactive, ref, toRefs} from 'vue'
import {FormInstance, FormRules} from 'element-plus'
import Message from '@/utils/message'
import {${className}, ${className}Status} from '${typesPackage}'
import {errorFormParams} from '@/utils/util'

const state = reactive<${className}.AddUpdateReactive>({
  addUpdatePageInit: {...${className}Status.defaultAddUpdatePageInit},
  addUpdateForm: {...${className}Status.defaultAddUpdateForm},
})

const rules = reactive<FormRules>(${className}Status.addUpdateFormRules)
const emit = defineEmits(['success'])
const addUpdateFormRef = ref<FormInstance>()
const {addUpdatePageInit, addUpdateForm} = toRefs<${className}.AddUpdateReactive>(state)


/**
 * 打开显示
 */
const show = (id: string | null) => {
  addUpdatePageInit.value.visible = true
  getInfoById(id)
}

/**
 * 获取单表信息
 */
const getInfoById = async (id: string | null) => {
  if (!id) return
  addUpdatePageInit.value.loading = true
  addUpdatePageInit.value.saveOrUpdate = false
  await get${className}ById(id).then(response => {
    const {data} = JSON.parse(JSON.stringify(response))
    addUpdateForm.value = {...data}
    addUpdatePageInit.value.title = '修改${tableComment}'
    addUpdatePageInit.value.buttonTitle = '修改'
  }).finally(() => {
    addUpdatePageInit.value.loading = false
  })
}

/**
 * 提交表单
 */
const submitForm = () => {
  addUpdatePageInit.value.visible = true
  addUpdateFormRef.value?.validate(async (valid) => {
    if (valid) {
      if (addUpdatePageInit.value.saveOrUpdate) {
        //增加
        await save${className}(addUpdateForm.value).then(_ => {
          Message.success("新增${tableComment}成功")
          emit("success");
          close();
        }).catch(err => {
          errorFormParams(err, addUpdateFormRef, addUpdateForm)
        }).finally(() => {
          addUpdatePageInit.value.loading = false
        })
      } else {
        //修改
        await update${className}(addUpdateForm.value).then(_ => {
          Message.success("修改${tableComment}成功")
          emit("success");
          close();
        }).catch(err => {
          errorFormParams(err, addUpdateFormRef, addUpdateForm)
        }).finally(() => {
          addUpdatePageInit.value.loading = false
        })
      }
    } else {
      addUpdatePageInit.value.loading = false
      Message.error("表单校验未通过，请重新检查提交内容");
    }
  })
}

/**
 * 关闭
 */
const close = () => {
  addUpdateForm.value = {...${className}Status.defaultAddUpdateForm}
  addUpdatePageInit.value = {...${className}Status.defaultAddUpdatePageInit}
  addUpdateFormRef.value?.resetFields()
}

defineExpose({
  show,
})
</script>

<style scoped>

</style>
